import kotlin.math.sqrt

/**
 * create by xuexuan
 * time 2020/5/8 9:35
 *
 * 319. 灯泡开关
 *
 *
 * 初始时有 n 个灯泡关闭。
 * 第 1 轮，你打开所有的灯泡。
 * 第 2 轮，每两个灯泡你关闭一次。
 * 第 3 轮，每三个灯泡切换一次开关（如果关闭则开启，如果开启则关闭）。
 * 第 i 轮，每 i 个灯泡切换一次开关。
 * 对于第 n 轮，你只切换最后一个灯泡的开关。 找出 n 轮后有多少个亮着的灯泡。
 *
 *
 * 输入: 3
 * 输出: 1
 * 解释:
 * 初始时, 灯泡状态 [关闭, 关闭, 关闭].
 * 第一轮后, 灯泡状态 [开启, 开启, 开启].
 * 第二轮后, 灯泡状态 [开启, 关闭, 开启].
 * 第三轮后, 灯泡状态 [开启, 关闭, 关闭].
 *
 * 你应该返回 1，因为只有一个灯泡还亮着。
 *
 */

class BulbSwitcher {


    /**
     * 对于每个灯泡 操作偶数次 灯泡是灭的，奇数次 灯泡是亮的
     *
     * 问题就是第n个灯泡，会被操作几次？
     *
     * 第i轮，可以被操作到的灯泡索引数，是i的倍数
     *
     * 那么操作数x ，可以看做是1- n 中 有几个是n的约数
     *
     *
     * n = a*b 也就是说约数是成对出现的 ，
     * 例如：
     * 第12栈灯泡操作次数，12 = 1*12 = 2*6 = 3*4 = 4*3 = 6*2 =12 *1   一共会被操作6次，最终是灭的
     * 第11栈灯泡操作次数，11 = 1*11   一共会被操作2次 ，最终是灭的
     * 第10栈灯泡操作次数，10 = 1*10 = 2*5 = 5*2 = 10*1  一共会被操作4次，最终是灭的
     * 第9栈灯泡操作次数，9 = 1*9 = 3*3 = 9*1   一共会被操作3次，最终是亮的
     *
     * 因为是成对出现的，若 a≠ b，则 约数的个数就是偶数个
     * 若a=b 则约数的个数就是奇数个
     *
     * a=b  也就是平方数
     *
     *
     * 那么现在就是求，1-n 中，有多少个数是可以开平方的，就有多少个灯泡是亮的
     *
     *
     * 因为数字是连续递增的，所以1 -n 中可以开根号的数字的个数就是 int（n^(1/2)）
     * 也就是最大的平方根
     *
     * 若有 3*3 必然会有 2*2  1*1，所以只需要求出最大的平方数即可
     */
    fun bulbSwitch(n: Int): Int {
        return sqrt(n.toDouble()).toInt()
    }
}